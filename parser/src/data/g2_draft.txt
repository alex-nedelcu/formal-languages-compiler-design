--- non-terminals

    program
    statementList
    statement
    simpleStatement
    structStatement
    defineStatement
    ioStatement
    assignStatement
    type
    identifier
    simpleType
    arrayType
    readStatement
    writeStatement
    displayable
    expression
    term
    factor
    ifStatement
    ifBranch
    condition
    loopStatement
    unsignedNumber
    lowercaseLetter
    letter
    digit
    character
    nonZeroDigit
    digitSequence
    underline
    INTEGER
    STRING
    BOOL
    RELATION


--- terminals

    START
    END
    define
    integer
    string
    bool
    read
    display
    if
    else
    loop
    iterator
    from
    step
    until
    PV
    NV
    ,
    ;
    =
    +
    -
    *
    /
    <
    <=
    >
    >=
    ==
    !=
    [
    ]
    (
    )
    {
    }
    #


--- productions

    program -> START.statementList.END
    statementList -> statement | statement.statementList
    statement -> simpleStatement | structStatement
    simpleStatement -> defineStatement | ioStatement | assignStatement
    defineStatement -> define.type.identifier.;
    type -> simpleType | arrayType
    simpleType -> integer | string | bool
    arrayType -> simpleType.[.unsignedNumber.]
    identifier -> lowercaseLetter | identifier.letter | identifier.digit
    ioStatement -> readStatement.; | writeStatement.;
    readStatement -> read.(.identifier.)
    writeStatement -> display.(.displayable.)
    displayable -> identifier | INTEGER | STRING | BOOL
    assignStatement -> identifier.=.expression.;
    expression -> term | expression.+.term | expression.-.term
    term -> factor | term.*.factor | term./.factor
    factor -> (.expression.) | identifier | INTEGER | identifier.[.unsignedNumber.]
    structStatement -> ifStatement | loopStatement
    ifStatement -> ifBranch | ifBranch.else.{.statementList.} | ifBranch.else.ifStatement
    ifBranch -> if.(.condition.).{.statementList.}
    condition -> expression.RELATION.expression
    RELATION -> < | <= | > | >= | == | !=
    loopStatement -> loop.(.iterator.=.identifier.,.from.=.expression.,.step.=.expression.,.until.=.expression.).{.statementList.}
    INTEGER -> PV.#.unsignedNumber.# | NV.#.unsignedNumber.#
    STRING -> character | character.STRING
    BOOL -> TRUE | FALSE
    unsignedNumber -> nonZeroDigit | nonZeroDigit.digitSequence
    digitSequence -> digit | digit.digitSequence
    digit -> 0 | nonZeroDigit
    nonZeroDigit -> 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
    character -> letter | underline
    letter -> a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z | A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z
    underline -> _
